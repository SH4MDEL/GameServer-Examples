프로세스
. 실행중인 컴퓨터 프로그램

쓰레드
. 프로세스의 작업 단위

단일 코어 하나가 실행할 수 있는 프로그램은 단 하나
실제로는 멀티코어 CPU가 각각의 코어를 프로그램에 배분함.

멀티쓰레드
Heap, Data, Code 영역을 각 쓰레드가 공유함
각 쓰레드는 Stack 만을 따로 가짐

thread t(func);

t.join(or detach)를 하지 않으면 t보다 먼저 main이 종료되는 상황이 발생한다.
이 경우 t는 main에 종속해 있는데, main이 끝나 버리므로 런타임 에러가 발생한다.

t.hardware_concurrency
	. CPU의 코어 개수를 리턴한다.
t.get_id
	. 쓰레드만의 id를 리턴한다.
t.join()
	. t가 종료될 때 까지 기다려준다.
t.detach()
	. 스레드 t와 스레드 객체와의 연결을 끊는다.
	. std::thread 객체에서 실제 쓰레드를 분리한다.
t.joinable()
	. t가 현재 사용 가능한지 묻는다.
	. t에 thread가 없을 경우 get_id 값은 0이 되는데,
	  joinable은 그저 id가 0인지 아닌지 묻는 함수이다.


atomic

++sum과 같은 연산은 레지스터 단에서 한번에 실행되지 않는다.
int32 eax = sum;
eax = eax + 1;
sum = eax;
과 같은 과정으로 발생한다.
우리는 sum이 증가했거나, 증가하지 않았거나 하나의 상황만을 원한다.
멀티쓰레드 환경에서 증가하는 중이라는 상황이 발생해선 안 된다.

즉 원자적인 연산이 발생해야 한다.
DB에서도 비슷한 상황이 벌어지곤 하는데,
A의 인벤에서 집행검을 빼고, B의 인벤에 집행검을 더해야 하는데
A의 인벤에서 집행검을 뺐는데 서버가 다운되어 버린다면 큰 문제가 발생한다.

atomic<int> sum과 같이 atomic 클래스를 이용하여 int를 선언하면
int의 연산이 원자적으로 이뤄짐이 보장된다.

unlock을 해 주지 않는다면 deadlock이 발생한다.


mutex (Mutual Exclusive)

std::lock_guard
RAII (Resource Acquisition is Initialization) 패턴을 이용한 클래스.
소멸자에서 자동으로 unlock을 부르기 때문에, 뮤텍스에서 unlock을 해 줄 필요가 없다.

std::unique_lock
lock_guard와 비슷하지만, 추가적인 기능이 있다.
std::defer_lock을 인자로 넘겨줌으로써, 일단 선언만 해 두고 잠글 시점을 늦출 수 있다.
잠글 때는 ul.lock()과 같이 사용한다.


deadlock

서로 다른 쓰레드에서 A 락 -> B 락, B 락 -> A 락의 순으로 서로 락을 잡으려고 할 때
각각 하나씩의 락만 잡고 있으면서 다른 락을 놔주지 않으며 교착 상태가 발생한다.

이 경우 락에 ID 등을 부여해서 높은 ID를 가진 락을 반드시 먼저 취득해야 하는 방법 등으로 해결할 수 있다.

데드락 탐지는 Lock Manager 등을 만들어서 그래프 구조로 락의 소유 관계를 나타낸 후
해당 그래프가 순환하는가 등을 체크함으로써 가능하다.


